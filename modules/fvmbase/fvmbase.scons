Import('env')

srcBase = ['CException.cpp',
           'RLogInterface.cpp',
           'StorageSite.cpp',
           'CRConnectivity.cpp',
           'OneToOneIndexMap.cpp',
           'Matrix.cpp',
           'Mesh.cpp',
           'Cell.cpp',
           'GlobalFields.cpp',
           'Field.cpp',
           'Model.cpp',
           'GradientModel.cpp',
           'MultiField.cpp',
           'MultiFieldReduction.cpp',
           'MultiFieldMatrix.cpp',
           'LinearSystem.cpp',
           'AMG.cpp',
           'BCGStab.cpp',
           'CG.cpp',
           'JacobiSolver.cpp',
           'GeomFields.cpp',
           'ThermalFields.cpp',
           'FlowFields.cpp',
           'Discretization.cpp',
           'Linearizer.cpp',
	   'StorageSiteMerger.cpp',
           'LinearSystemMerger.cpp',
           'MeshAssembler.cpp',
	   'MeshDismantler.cpp',
           'ILU0Solver.cpp',
	   'SpikeSolver.cpp',
           'AABB.cpp',
           'KSearchTree.cpp',
	   'SpikeStorage.cpp',
	   'DirectSolver.cpp',
	   'SpalartAllmarasFields.cpp',
	   'WallDistanceFields.cpp',
	   'HamiltonJacobiFields.cpp'
           ]

env.createSharedLibrary('fvmbase',srcBase,['rlog', 'cgal', 'umfpack', 'boost'])


env.createATypedSharedLibrary('models_atyped',['models.cpp'],['rlog','fvmbase', 'cgal','boost'])


env.createSwigModule('fvmbaseExt',sources=['baseExt.i'],
                     deplibs=['fvmbase','rlog', 'cgal','umfpack', 'blas', 'gfortran','boost'])

env.createATypedSwigModule('models_atyped',sources=['models.i'],
                     deplibs=['models_atyped','fvmbase','rlog', 'cgal', 'blas', 'gfortran','boost'])

